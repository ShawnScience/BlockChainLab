import hashlib 
import datetime

# OK, so I will build a simple blockchain and use it in a hypotehtical voting system
class Block:
    def __init__(self, index, timestamp, data, previous_hash):
        self.index = index
        self.previous_hash = previous_hash
        self.timestamp = timestamp
        self.data = data
        self.hash = self.calculate_hash()

    def calculate_hash(self):
        data_string = str(self.index) + str(self.previous_hash) + str(self.timestamp) + str(self.data) 
        # Use SHA-3 (Keccak) for hashing just like Ethereum :)
        return hashlib.sha3_256(data_string.encode()).hexdigest()

class Blockchain:
    def __init__(self):
        self.chain = [self.create_egg_block()]
    
    def create_egg_block(self):
        # Egg block is the first block in the chain
        return Block(0, datetime.datetime.now(), "Egg Block", "0")
    
    def get_latest_block(self):
        return self.chain[-1]
    
    def add_block(self, new_block):
        new_block.previous_hash = self.get_latest_block().hash
        new_block.hash = new_block.calculate_hash()
        self.chain.append(new_block)

    # Iterate through the chain and make sure hashes are valid
    def chain_valid(self):
        for i in range(1, len(self.chain)):
            current_block = self.chain[i]
            previous_block = self.chain[i-1]
            # Here I am just checking lenght as an exercise in curiosity. Each block hash is 64 characters long
            if (len(current_block.hash) != 64):
                print("************FALSE BLOCK DETECTED: HASH LENGTH NOT 64************/n")
                self.print_block(current_block)
                print("************FALSE BLOCK DETECTED: HASH LENGTH NOT 64************")
                print("\n")
                return False
            if (len(current_block.previous_hash) != 64):
                print("************FALSE BLOCK DETECTED: PREVIOUS HASH LENGTH NOT 64************/n")
                self.print_block(current_block)
                print("************FALSE BLOCK DETECTED: PREVIOUS HASH LENGTH NOT 64************")
                print("\n")
                return False
            if current_block.hash != current_block.calculate_hash():
                print("************FALSE BLOCK DETECTED: HASH NOT VALID************/n")
                self.print_block(current_block)
                print("************FALSE BLOCK DETECTED: HASH NOT VALID************")
                print("\n")
                return False
            if current_block.previous_hash != previous_block.hash:
                print("************FALSE BLOCK DETECTED: PREVIOUS HASH NOT VALID************/n")
                self.print_block(current_block)
                print("************FALSE BLOCK DETECTED: PREVIOUS HASH NOT VALID************")
                print("\n")
                return False
        return True

    def print_chain(self):
        for block in self.chain:
            print(f"Index: {block.index}")
            print(f"Timestamp: {block.timestamp}")
            print(f"Data: {block.data}")
            print(f"Hash: {block.hash}")
            print(f"Previous Hash: {block.previous_hash}")
            print("\n")
        
    def print_block(self, block):
        print(f"Index: {block.index}")
        print(f"Timestamp: {block.timestamp}")
        print(f"Data: {block.data}")
        print(f"Hash: {block.hash}")
        print(f"Previous Hash: {block.previous_hash}")
        print("\n")

# Lets Vote
if __name__ == "__main__":
    # Create a new blockchain
    blockchain = Blockchain()
    # Add votes
    blockchain.add_block(Block(1, datetime.datetime.now(), "Luke votes for Yoda", blockchain.get_latest_block().hash))
    blockchain.add_block(Block(2, datetime.datetime.now(),"Leia votes for Yoda", blockchain.get_latest_block().hash))
    blockchain.add_block(Block(3, datetime.datetime.now(),"Chewie Votes for Yoda", blockchain.get_latest_block().hash))
    blockchain.add_block(Block(4, datetime.datetime.now(),"Han Votes for Vader", blockchain.get_latest_block().hash))
    #Check if the chain is valid
    # print("Is the blockchain valid?", blockchain.chain_valid())
    # Print the blockchain
    # blockchain.print_chain()
    # Try to tamper with the blockchain
    blockchain.chain[1].data = "Luke votes for Vader"
    blockchain.chain[1].hash = blockchain.chain[1].calculate_hash()
    # Check if the chain is valid after tampering
    print("Is the blockchain valid after tampering?", blockchain.chain_valid())
    # Print the blockchain after tampering
    blockchain.print_chain()
